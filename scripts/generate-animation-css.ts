import fs from 'fs/promises';
import path from 'path';

const scriptPath = process.argv[1] || '';
const scriptDir = scriptPath ? path.dirname(scriptPath) : process.cwd();

const INPUT = path.resolve(scriptDir, '../src/lib/animation/animation-tasks.ts');
const OUTPUT_DIR = path.resolve(scriptDir, '../src/styles/generated');
const OUTPUT = path.join(OUTPUT_DIR, 'animation-durations.css');

async function readInput(): Promise<string> {
  return fs.readFile(INPUT, 'utf8');
}

function extractValues(tsContent: string): Record<string, number> {
  const results: Record<string, number> = {};
  const keys = ['ATTACK', 'DAMAGE', 'DESTROY'];
  for (const k of keys) {
    const re = new RegExp(`${k}\\s*:\\s*([0-9]+)`, 'm');
    const m = tsContent.match(re);
    if (m && m[1]) results[k] = parseInt(m[1], 10);
  }
  return results;
}

function msToSecondsString(ms: number): string {
  const s = ms / 1000;
  return s % 1 === 0 ? `${s.toFixed(0)}s` : `${s.toFixed(2)}s`;
}

function generateCssMap(values: Record<string, number>): string {
  const attack = values.ATTACK ?? 300;
  const damage = values.DAMAGE ?? 1000;
  const destroy = values.DESTROY ?? 1000;

  return `/* generated by scripts/generate-animation-css.ts - DO NOT EDIT */\n:root {\n  --ah-attack-duration: ${msToSecondsString(attack)};\n  --ah-damage-duration: ${msToSecondsString(damage)};\n  --ah-destroy-duration: ${msToSecondsString(destroy)};\n}\n`;
}

async function ensureDir(dir: string): Promise<void> {
  try {
    await fs.mkdir(dir, { recursive: true });
  } catch {
    // ignore
  }
}

async function main(): Promise<void> {
  try {
    const content = await readInput();
    const values = extractValues(content);
    const css = generateCssMap(values);
    await ensureDir(OUTPUT_DIR);

    try {
      const existing = await fs.readFile(OUTPUT, 'utf8');
      if (existing === css) {
        console.log('No changes to animation CSS.');
        return;
      }
    } catch {
    // file missing or unreadable -> will write
    }

    await fs.writeFile(OUTPUT, css, 'utf8');
    console.log(`Generated ${OUTPUT}`);
  } catch (err) {
    console.error('Failed to generate animation CSS:', err);
    process.exit(1);
  }
}

main();
